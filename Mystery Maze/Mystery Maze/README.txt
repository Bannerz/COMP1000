__   __  __   __  _______  _______  _______  ______    __   __    __   __  _______  _______  _______ 
|  |_|  ||  | |  ||       ||       ||       ||    _ |  |  | |  |  |  |_|  ||   _   ||       ||       |
|       ||  |_|  ||  _____||_     _||    ___||   | ||  |  |_|  |  |       ||  |_|  ||____   ||    ___|
|       ||       || |_____   |   |  |   |___ |   |_||_ |       |  |       ||       | ____|  ||   |___ 
|       ||_     _||_____  |  |   |  |    ___||    __  ||_     _|  |       ||       || ______||    ___|
| ||_|| |  |   |   _____| |  |   |  |   |___ |   |  | |  |   |    | ||_|| ||   _   || |_____ |   |___ 
|_|   |_|  |___|  |_______|  |___|  |_______||___|  |_|  |___|    |_|   |_||__| |__||_______||_______|

COMP1000 Project by Alex Banfield (University of Plymouth) 2024

Thanks for playing my game!

Controls:
Navigate the menu using the arrow keys (selected options will appear in blue) (default is unselected)
Press enter to select
Move the player using W A S D keys
Press Escape to quit to the menu at any time
Save your progress by pressing 'P'
Load your game by pressing 'O'

Aim of the Game:
The aim of this game is to dodge zombies and make it to the end of the maze, but wait! You must solve a puzzle before you can continue!
Can you escape before the time runs out? Make sure to keep an eye out for potions along the way to keep your health up!

Beware the fog as it could contain hidden dangers! Make sure you don't get lost!

You have 3 lives per game, and a health bar to keep an eye on. Lose your health, lose a life. Lose all your lives, lose the game!

Maze generation:
I have chosen to use recursive backtracking for my maze generation method. The method takes an initial grid size (first level is 15x15), and sets all cells to walls. The starting point is always the top left corner of the maze bounds. This is set to a path of the maze. From the current cell, a random neighbouring cell that hasn't been visited yet is chosen and the wall removed and replaced with path. This is then recursively repeated for each neighbour. If the current cell has no unvisited neighbours, it backtracks to the previous cell where unvisited neighbours still exist.
The process continues until all cells have been visited.

Reveal fog:
The fog is generated by creating another grid of cells overlayed on top of the maze, of the same size, but filled with solid black. The cells within a 3 cell radius of the player are then removed, revealing the maze underneath.

End tile:
The end tile is placed randomly in one of the three corners not occupied by the player. When the player collides with this tile, it triggers the puzzle screen to run, allowing the player to complete the puzzle.

Collision:
Collision is handled via separate collision boxes overlayed on the collidable objects (except walls). This allows for some overlap of sprites which can be tuned as needed.
When the player collides with a zombie, health is removed. If the player gets to 0 health, they lose a life and their health is reset. When colliding with a position object, the player is given health. If the player is at full health, the potion is not picked up or consumed. 

Puzzles:
Puzzles are simple randomly generated addition problems. These are designed to be easy but can be made harder or replaced with another kind of puzzle if needed. Time constraints prevented further development of this feature. 

Credits:

Game developed by Alex Banfield 

Sprites: 
Alex Banfield: Heart and potions
CazWolf: https://cazwolf.itch.io/tiny-pixel-fantasy-generator 
Chris Hamons: https://opengameart.org/content/dungeon-crawl-32x32-tiles 

Tutorials Used: 
Menu Tutorial: YouTube.com/watch?v=bOG8667yePY 
Screen States: YouTube.com/watch?v=Qhlqhen6cmw 
Views Documentation: https://www.sfml-dev.org/tutorials/2.6/graphics-view.php
Game Timer, score, and Game Music: https://cplusplus.com/forum/windows/172064/
Bounding box collision: https://www.youtube.com/watch?v=l2iCYCLi6MU
HUD/UI: https://www.youtube.com/watch?v=uqrcVITXtEM
Font and text: https://www.youtube.com/watch?v=8kuYOdRO894
Input documentation: https://www.sfml-dev.org/documentation/2.6.1/classsf_1_1Keyboard.php
Typing input: https://en.sfml-dev.org/forums/index.php?topic=26927.0 / https://en.sfml-dev.org/forums/index.php?topic=19965.0
Save to DAT: https://stackoverflow.com/questions/65104558/save-data-to-a-dat-file / http://www.java2s.com/Tutorial/Cpp/0240__File-Stream/savespersonobjecttodisk.htm / https://cplusplus.com/forum/beginner/106630/

Music:
Music by Jerome Chauve: https://pixabay.com/users/abydos_music-27178115/
